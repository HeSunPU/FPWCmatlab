clear surf_drift  DM1command
Nitr = 20;%4000; % iterations of control loop
cRange = [-8, -4]; %[-12, -3];% the range for display
simOrLab = 'simulation';%'lab';%  'simulation' or 'lab', run the wavefront correction loops in simulation or in lab
runTrial = 1;
Initialization;
DM2command = zeros(DM.activeActNum,1);


%%
def_surf_drift=1; % if you want to specify the surface drift in m, use this
camera.noise=0;

surf_disp = 12e-10;

if def_surf_drift == 1
    marginWidth = (coronagraph.SPwidth - DM.widthDM)/2;
    marginNpixel = round(marginWidth / coronagraph.SPwidth * DM.DMmesh(1));
    
    surf_drift = zeros(DM.DMmesh);
    surf_drift(marginNpixel+1 : end-marginNpixel, marginNpixel+1 : end-marginNpixel) = ...
        surf_disp*(rand([DM.DMmesh - 2 * marginNpixel,1])-0.5);%/scale;
    
    surf_drift2 = zeros(DM.DMmesh);
    surf_drift2(marginNpixel+1 : end-marginNpixel, marginNpixel+1 : end-marginNpixel) = ...
       surf_disp*(rand([DM.DMmesh - 2 * marginNpixel,1])-0.5);%/scale;
    
    % imagesc(surf_drift); colorbar;
    
    command_drift = height2voltage(surf_drift, DM, target.driftDM, 5);
    command_drift2 = height2voltage(surf_drift2, DM, target.driftDM, 5);
else
    %%
    command_drift = (rand([DM.activeActNum,1])-0.5)*0.014; % 0.014 is approx the range of commands generated by height2voltage when 1.2nm surface drift is used
    command_drift2 = (rand([DM.activeActNum,1])-0.5)*0.014;
end
command_voltage = zeros(DM.Nact,DM.Nact);
command_voltage(DM.activeActIndex) = command_drift;
% imagesc(command_voltage);colorbar;

DM1command = command_drift;
img = getImg(target, DM, coronagraph, camera, DM1command, DM2command, simOrLab);

DM1command_2 = command_drift2;
img0 = getImg(target, DM, coronagraph, camera, DM1command_2, DM2command, simOrLab);

% percent_norm_change = abs(norm(img-img0)/norm(img0))*100

mean_change = mean(mean(abs(img-img0)))

hold on
plot(surf_disp,mean_change,'*')
xlabel('Max Surface Displacement [m]')
ylabel('Mean of Change in Image')
axis tight